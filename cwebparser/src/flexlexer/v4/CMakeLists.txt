# cwebparser/flexlexer/CMakeLists.txt

cmake_minimum_required(VERSION 3.20)

set(BASENAME cwebbisonparser.v4)
project(${BASENAME}.lexer)

# needed for zero optimization, otherwise some local variables are optimized out
if (CMAKE_CXX_COMPILER_ID MATCHES GNU)
  set(CMAKE_CXX_FLAGS_DEBUG "-O0 -ggdb3" CACHE STRING "" FORCE)
  set(CMAKE_CXX_STANDARD 23 CACHE STRING "" FORCE)
endif()

# flex lexer library
find_package(FLEX)
set(FLEXLIB ${BASENAME}.flex)
# output .cpp and .h files should be unnecessary since .l file has them
FLEX_TARGET(flexfilesgen ${GRAMMAR_DIR}/${FLEXLIB}.l ${FLEXLIB}.cpp
  #COMPILE_FLAGS -Cfe
  COMPILE_FLAGS -f
  #  DEFINES_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${FLEXLIB}.h
)

add_library(${FLEXLIB} OBJECT ${FLEX_flexfilesgen_OUTPUTS})

#target_compile_features(${FLEXLIB} PRIVATE cxx_std_20)
target_compile_options(${FLEXLIB} PRIVATE -Wall -Werror -Wextra -O0 -ggdb3 -std=c++2b)
target_include_directories(${FLEXLIB} PRIVATE ../.. ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/../..)
target_link_libraries(${FLEXLIB} fmt)

add_dependencies(${FLEXLIB} bisonfilesgen)

# tests

set(TESTNAME cweblexer.v4.gtest)

add_executable(${TESTNAME} ${TESTNAME}.cpp)
set_target_properties(${TESTNAME} PROPERTIES EXCLUDE_FROM_ALL true)

# for header file generated by bison
target_include_directories(${TESTNAME} PRIVATE ../.. ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/../..)
#target_compile_features(${TESTNAME} PRIVATE cxx_std_23)

if(CYGWIN)
  target_compile_definitions(${TESTNAME} PRIVATE GTEST_HAS_PTHREAD=1)
endif()
if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
  target_compile_options(${TESTNAME} PRIVATE -Wall -Werror -Wextra -O0 -ggdb3 -std=c++2b)
elseif(CMAKE_CXX_COMPILER_ID MATCHES MSVC)
# ranges library cannot take -Wall -WX
  target_compile_options(${TESTNAME} PRIVATE -Od)
elseif(CMAKE_CXX_COMPILER_ID MATCHES Clang)
  target_compile_definitions(${TESTNAME} PRIVATE _SILENCE_CLANG_CONCEPTS_MESSAGE)
endif()

target_link_libraries(${TESTNAME} gmock_main ${FLEXLIB} cwebbisonparser.v4.bison fmt)

enable_testing()
include(GoogleTest)



