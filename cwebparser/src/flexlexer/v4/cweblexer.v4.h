#ifndef CWEBLEXER_V4_H
#define CWEBLEXER_V4_H
// cweblexer.v4.h

/*
MIT License

Copyright (c) 2021 Zartaj Majeed

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#include <queue>

#include <fmt/format.h>

#include "bisonparser/v4/cwebbisonparser.v4.bison.h"

#include "flexlexer/cwebbisonparser_guard_flexlexer.h"

namespace cweb::v4 {
using namespace std;
using namespace fmt;

struct CWebLexerConfig {
  bool escapeMacroNewlines = true;
};

class CWebLexer: public yyFlexLexer {
public:

// can only declare here since flex generates the implementation
//CWebBisonParser::symbol_type yylex(ParserState& parserState, location& parserLocation);
  CWebBisonParser::symbol_type yylex(BisonParserState& parserState);

  CWebLexer() = default;

  explicit CWebLexer(istream* yyin_arg): yyFlexLexer(yyin_arg) {}

public:

  CWebLexerConfig config;
  
private:

// defined separately because it needs symbols from .cpp generated by flex
// set lexer state as directed by parser, an example of lexical feedback
  void setLexerState(const BisonParserState& parserState);

// have to jump through hoops to assign a bison symbol
// symbols do not have assignment operator but have copy constructor
// also symbols have move ref but no move rref
  void setPendingToken(CWebBisonParser::symbol_type token) {
    pendingToken.clear();
    pendingToken.move(token);
    tokenIsPending = true;
  }

  void includeFileStart(istream& file);

  void includeFileEnd() {
    yypop_buffer_state();
  }

private:

// sometimes lexer needs to return two tokens, so it returns first token and sets pendingToken to second token to be returned on next call to yylex
  CWebBisonParser::symbol_type pendingToken;
  bool tokenIsPending = false;

};

}

#endif


