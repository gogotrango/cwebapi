# cwebparser/parser/CMakeLists.txt

cmake_minimum_required(VERSION 3.20)

set(BASENAME cwebbisonparser.v4)
project(${BASENAME}.bisonparser)

# needed for zero optimization, otherwise some local variables are optimized out
if (CMAKE_CXX_COMPILER_ID MATCHES GNU)
  set(CMAKE_CXX_FLAGS_DEBUG "-O0 -ggdb3" CACHE STRING "" FORCE)
  set(CMAKE_CXX_STANDARD 23 CACHE STRING "" FORCE)
endif()

set(BISONLIB ${BASENAME}.bison)

# run bison to generate source files for parser library
add_custom_command(
  DEPENDS ${GRAMMAR_DIR}/${BISONLIB}.y
  OUTPUT ${BISONLIB}.cpp ${BISONLIB}.h
  COMMAND ${BISON} -Wall -Wdangling-alias -Werror --report=lookaheads --report-file=bisonreport.txt ${GRAMMAR_DIR}/${BISONLIB}.y
  COMMENT "Generate bison parser files"
  VERBATIM)

# make parser library depend on generated source files
add_custom_target(bisonfilesgen
  DEPENDS ${BISONLIB}.cpp ${BISONLIB}.h)

# create parser library
add_library(${BISONLIB} OBJECT ${BISONLIB}.cpp)

#target_compile_features(${BISONLIB} PRIVATE cxx_std_20)
target_compile_options(${BISONLIB} PRIVATE -Wall -Werror -Wextra -O0 -ggdb3 -std=c++2b)
target_include_directories(${BISONLIB} PRIVATE ../.. ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/../..)
target_link_libraries(${BISONLIB} fmt)

add_dependencies(${BISONLIB} bisonfilesgen)

# standalone parser executable with -DBUILD_MAIN
add_executable(cwebbisonparse ${BISONLIB}.cpp)
add_dependencies(cwebbisonparse bisonfilesgen)
target_compile_definitions(cwebbisonparse PRIVATE BUILD_MAIN)
target_compile_options(cwebbisonparse PRIVATE -Wall -Werror -Wextra -O0 -ggdb3 -std=c++2b)
target_include_directories(cwebbisonparse PRIVATE ../.. ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/../..)
target_link_libraries(cwebbisonparse cwebbisonparser.v4.flex fmt)

# tests

set(TESTNAME ${BASENAME}.gtest)

add_executable(${TESTNAME} ${TESTNAME}.cpp)
#set_target_properties(${TESTNAME} PROPERTIES EXCLUDE_FROM_ALL true)

# for header file generated by bison
target_include_directories(${TESTNAME} PRIVATE ../.. ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/../..)
#target_compile_features(${TESTNAME} PRIVATE cxx_std_23)

if(CYGWIN)
  target_compile_definitions(${TESTNAME} PRIVATE GTEST_HAS_PTHREAD=1)
endif()
if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
  target_compile_options(${TESTNAME} PRIVATE -Wall -Werror -Wextra -O0 -ggdb3 -std=c++2b)
elseif(CMAKE_CXX_COMPILER_ID MATCHES MSVC)
# ranges library cannot take -Wall -WX
  target_compile_options(${TESTNAME} PRIVATE -Od)
elseif(CMAKE_CXX_COMPILER_ID MATCHES Clang)
  target_compile_definitions(${TESTNAME} PRIVATE _SILENCE_CLANG_CONCEPTS_MESSAGE)
endif()

target_link_libraries(${TESTNAME} gmock_main ${BISONLIB} cwebbisonparser.v4.flex fmt)

enable_testing()
include(GoogleTest)



